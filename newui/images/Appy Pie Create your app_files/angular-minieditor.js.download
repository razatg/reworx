'use strict';
(function() {
    var miniCommands = {
        bold: {
            command: 'bold',
            type: 'button',
            title: 'Bold',
            icon: 'icon-bold',
            arg: false
        },
        italic: {
            command: 'italic',
            type: 'button',
            title: 'Italic',
            icon: 'icon-italic',
            arg: false
        },
        underline: {
            command: 'underline',
            type: 'button',
            title: 'Underline',
            icon: 'icon-underline',
            arg: false
        },
        strikethrough: {
            command: 'strikethrough',
            type: 'button',
            title: 'Strikethrough',
            icon: 'icon-strike',
            arg: false
        },
        justifyleft: {
            command: 'justifyleft',
            type: 'button',
            title: 'Left justify',
            icon: 'align-left',
            arg: false
        },
        justifycenter: {
            command: 'justifycenter',
            type: 'button',
            title: 'Center justify',
            icon: 'align-center',
            arg: false
        },
        justifyright: {
            command: 'justifyright',
            type: 'button',
            title: 'Right justify',
            icon: 'align-right',
            arg: false
        },
        insertunorderedlist: {
            command: 'insertunorderedlist',
            type: 'button',
            title: 'Unordered list',
            icon: 'list-ul',
            arg: false
        },
        insertorderedlist: {
            command: 'insertorderedlist',
            type: 'button',
            title: 'Ordered list',
            icon: 'list-ol',
            arg: false
        },
        indent: {
            command: 'indent',
            type: 'button',
            title: 'Indent',
            icon: 'indent',
            arg: false
        },
        outdent: {
            command: 'outdent',
            type: 'button',
            title: 'Outdent',
            icon: 'outdent',
            arg: false
        },
        removeformat: {
            command: 'removeformat',
            type: 'button',
            title: 'Remove format',
            icon: 'eraser',
            arg: false
        },
        fontsize: {
            command: 'fontsize',
            type: 'button',
            title: 'Font size',
            icon: 'text-height',
            arg: true,
            promptTitle: 'Enter the number of 1-7',
            defaultValue: 3,
            filter: function(value) {
                value = value ? parseInt(value) : false;
                if (!(value >= 1 && value <= 7)) {
                    value = 2;
                }
                return value;
            }
        },
        createlink: {
            command: 'createlink',
            type: 'button',
            title: 'Create Deep Link',
            icon: 'icon-link-1',
            arg: true,
            promptTitle: 'Please paste app page link URL here',
            defaultValue: '',
            filter: function(value) {
                return value;
            }
        },
        unlink: {
            command: 'unlink',
            type: 'button',
            title: 'Remove Link',
            icon: 'glyphicon glyphicon-link',
            arg: false,
            filter: function(value) {
                return value;
            }
        },
         createmailto: {
            command: 'createmailto',
            type: 'button',
            title: 'Create Email Link',
            icon: 'icon-email',
            arg: true,
            promptTitle: 'Please enter email address.',
            defaultValue: '',
            filter: function(value) {
                return value;
            }
        },
          createsimplelink: {
            command: 'createsimplelink',
            type: 'button',
            title: 'Create Link',
            icon: 'icon-link-1',
            arg: true,
            promptTitle: 'Please enter URL here.',
            defaultValue: '',
            filter: function(value) {
                return value;
            }
        },
        unlinkmailto: {
            command: 'unlink',
            type: 'button',
            title: 'Remove Email Link',
            icon: 'appyicon-mail',
            arg: false,
            filter: function(value) {
                return value;
            }
        },
        insertimage: {
            command: 'insertimage',
            type: 'button',
            title: 'Insert image',
            icon: 'image',
            arg: true,
            promptTitle: 'Enter the image url',
            defaultValue: '',
            filter: function(value) {
                return value;
            }
        }
    };
    var defaultMenus = [
        ['bold', 'italic', 'underline', 'strikethrough'],
        ['fontsize'],
        ['justifyleft', 'justifycenter', 'justifyright'],
        ['insertunorderedlist', 'insertorderedlist'],
        ['indent', 'outdent'],
        ['removeformat', 'createlink', 'insertimage', 'unlink','createmailto','unlinkmailto','createsimplelink']
    ];
    angular.module('jerryhsia.minieditor', []).directive('minieditor', function($compile, $timeout, minieditorUI) {
        function link($scope, $element, $attrs, $ctrl) {
            if (!angular.isDefined($scope.options) || !angular.isObject($scope.options)) {
                $scope.options = {};
            }
            $element.html(minieditorUI.getTemplate($scope.options));
            $compile($element.contents())($scope);
            var editor = $element.find('div.minieditor-content');
            $ctrl.$render = function() {
                editor.html($ctrl.$viewValue);
            };
            editor.on('input keyup paste mouseup blur', function(event) {
                var content = editor.html();
                if (content == '<br>') {
                    content = '';
                }
                $ctrl.$setViewValue(content);
                $ctrl.$modelValue = content;
                if (event.type == 'blur') {
                     $timeout(function() {
							$scope.method();
					},200)
                }
                if (event.type == 'keyup' && angular.isDefined($attrs.keyupmethod)) {
                    $scope.keyupmethod();
                }
            });

            function getCommandState(command) {
                return document.queryCommandState(command);
            }

            function getCommandValue(command) {
                return document.queryCommandValue(command);
            }

            function isTag(tag) {
                var selection = window.getSelection().getRangeAt(0);
                if (selection) {
                    if (selection.startContainer.parentNode.tagName === tag.toUpperCase() || selection.endContainer.parentNode.tagName === tag.toUpperCase()) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            }
            $scope.states = {};
            var refreshing = false;

            function refreshState() {
                if (refreshing) return;
                refreshing = true;
                angular.forEach(miniCommands, function(commandObj, command) {
                    if (commandObj.arg) {
                        var value = getCommandValue(command);
                        if (command == 'createlink') {
                            value = isTag('a');
                        }
                        if (value) {
                            $scope.states[command] = value;
                        } else {
                            delete $scope.states[command];
                        }
                    } else {
                        var state = getCommandState(command);
                        if (command == 'unlink') {
                            $scope.states[command] = value;
                        }
                        if (state) {
                            $scope.states[command] = state;
                        } else {
                            delete $scope.states[command];
                        }
                    }
                });
                refreshing = false;
            }
            $scope.exec = function(command) {
                var commandObj = miniCommands[command];
                var selected;
                if (commandObj.arg) {
                    $timeout(function() {
                        var defaultValue = getCommandValue(command);
                        if (!defaultValue) {
                            defaultValue = commandObj.defaultValue;
                        }
                        if (command == 'createlink') {
                            var selected = window.getSelection().toString();
                        }
                        if (command == 'createsimplelink') {
                            var selected = window.getSelection().toString();
                        }
                       else if (command == 'createmailto') {
                            var selected = window.getSelection().toString();
                        }
                        if (!selected) {
                            $('#deepLinkAlertBox').modal('show');
                            return false;
                        }
                        var value = prompt(commandObj.promptTitle, defaultValue);
                        if (value && value.length > 0) {
                            value = commandObj.filter(value);
                            if(command == 'createlink'){
								var newlink = "<a href=javascript:opendeeplinkpage('" + value + "')>" + selected + "</a>";
						     }
						     if(command == 'createsimplelink'){
								var newlink = "<a target='_blank' href='"+value+"'>" + selected + "</a>"; 
						     }
						     else if(command == 'createmailto')
						     {
								var newlink = "<a href='mailto:"+value+"'>" + selected + "</a>"; 
							 }
						     
                            document.execCommand('insertHtml', false, newlink);
                            refreshState();
                            $scope.method();
                        }
                    }, 50);
                } else {
                    var selected = window.getSelection().toString();
                    if (!selected) {
                        $('#deepLinkAlertBox').modal('show');
                        return false;
                    }
                    document.execCommand(command, false, null);
                    refreshState();
                }
            };
            editor.on('click keyup focus mouseup blur change', function() {
                $timeout(function() {
                    refreshState();
                }, 50);
            });
        }
        return {
            template: '<div id="{{options.id}}" class="{{options.class}} minieditor" ng-attr-style="width:{{options.width? options.width + \'px\':\'100%\'}};"></div>',
            restrict: 'E',
            scope: {
                value: '=ngModel',
                options: '=options',
                method: "&",
                keyupmethod: "&"
            },
            replace: true,
            require: 'ngModel',
            link: link
        };
    }).factory('minieditorUI', function() {
        function getTemplate(options) {
            return getMenuTemplate(options) + getContentTemplate(options);
        }

        function getContentTemplate(options) {
            return '<div contenteditable="true" class="minieditor-content dEditor" ng-attr-style="height:{{options.height? options.height + \'px\':\'100px\'}};"></div>';
        }

        function getMenuTemplate(options) {
            var menus;
            if (angular.isDefined(options.menus) && angular.isArray(options.menus)) {
                menus = options.menus;
            } else {
                menus = defaultMenus;
            }
            var menuText = '<div class="minieditor-menu icon-cog-4">';
            for (var i = 0; i < menus.length; i++) {
                menuText += '<div class="minieditor-tab stretchLeft" role="group">';
                for (var j = 0; j < menus[i].length; j++) {
                    if (angular.isDefined(miniCommands[menus[i][j]])) {
                        menuText += getMenuItem(miniCommands[menus[i][j]]);
                    } else {
                        console.log('Unknow command: ' + menus[i][j]);
                    }
                }
                menuText += '</div>';
            }
            menuText += '</div>';
            return menuText;
        }

        function getMenuItem(commandObj) {
            switch (commandObj.type) {
                case 'button':
                    return '<button ng-click="exec(\'' + commandObj.command + '\')"  type="button" class="customComoMinieditor ' + commandObj.icon + '" title="' + commandObj.title + '" unselectable="on"></button>';
                    break;
                default:
                    return '';
                    break;
            }
        }
        return {
            getTemplate: getTemplate
        };
    });
})();
